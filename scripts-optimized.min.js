// DUSOLAI - JavaScript Optimizado para Conversión y Performance
// Versión: 2.2 - Corrección scroll modal y carga de proyectos

(function() {
    'use strict';

    // Configuración global
    const config = {
        scrollThreshold: 100,
        animationOffset: 80,
        formEndpoint: 'https://formspree.io/f/TU_FORM_ID_REAL', // <<== ACTUALIZAR
        gaTrackingId: 'G-TU_GA_ID_REAL',                     // <<== ACTUALIZAR
        hotjarId: 'TU_HOTJAR_ID_REAL',                       // <<== ACTUALIZAR
        googleAdsConversionId: 'AW-CONVERSION_ID_REAL/LABEL_REAL', // <<== ACTUALIZAR
        headerHeight: 70 // Asegúrate que coincida con tu CSS
    };

    // Estado global de la aplicación
const state = {
        isMenuOpen: false,
        hasScrolled: false,
        formSubmitting: false,
        activeModalId: null,
        prevFocusedElement: null,
        focusTrapHandler: null
    };

    // DATOS DE TODOS LOS PROYECTOS DEL PORTAFOLIO
    const allPortfolioProjects = [
        // Proyectos que YA ESTÁN EN TU HTML (los primeros 5)
        {
            id: 'proyecto-trading-ia',
            alreadyRendered: true, // Marcamos que ya está en el HTML
            category: 'ia trading',
            mediaImg: 'images/proyecto-trading-ia.jpg',
            title: 'Plataforma Avanzada de Trading Algorítmico con IA (BTC/USD y SPY)',
        },
        {
            id: 'proyecto-marketing-ia',
            alreadyRendered: true,
            category: 'ia automatizacion',
            mediaImg: 'images/proyecto-marketing-ia.jpg',
            title: 'Arquitectura Multiagente IA para Automatización 360º de Marketing Digital',
        },
        {
            id: 'proyecto-asistente-conversacional', // ID del HTML original
            alreadyRendered: true,
            category: 'ia software',
            mediaImg: 'images/proyecto-3.jpg', // Mapeado desde el HTML original
            title: 'Desarrollo de Asistente Virtual con Agentes Inteligentes y Comprensión Contextual',
        },
        {
            id: 'proyecto-control-gastos',
            alreadyRendered: true,
            category: 'automatizacion software',
            mediaImg: 'images/proyecto-4.jpg',
            title: 'Sistema Automatizado de Control de Gastos e Inventario para Hostelería (Integración EPOS Now)',
        },
        {
            id: 'proyecto-ia-local', // ID del HTML original
            alreadyRendered: true,
            category: 'ia software infra',
            mediaImg: 'images/proyecto-ia-local.jpg', // Mapeado desde el HTML original (era proyecto-5.jpg)
            title: 'Implementación de Sistema de IA Local con Servidor GPU para LLMs Privados',
        },

        // === PROYECTOS A CARGAR DINÁMICAMENTE (DEL 6 AL 10 DEL HTML ORIGINAL) ===
        {
            id: 'proyecto-extraccion-pdf',
            category: 'ia automatizacion software',
            date: 'Completado en 2023',
            title: 'Extracción de Datos de Facturas PDF con Python',
            client: { name: 'Empresa de Contabilidad (Ejemplo)', avatar: '' },
            summary: 'Sistema automatizado para procesar lotes de facturas en PDF, extraer datos clave (fecha, proveedor, importe, IVA, etc.) y volcarlos en hojas de cálculo o bases de datos.',
            challenge: 'Reducir el tiempo y los errores asociados a la entrada manual de datos de facturas, mejorando la eficiencia del departamento contable.',
            solution: [
                'Uso de librerías de Python para leer y parsear PDFs.',
                'Implementación de OCR para facturas escaneadas.',
                'Reglas de extracción personalizadas y validación de datos.',
                'Exportación a CSV o integración con bases de datos.'
            ],
            results: [
                { value: '90%', label: 'Reducción Tiempo Procesamiento' },
                { value: '>98%', label: 'Precisión Extracción' }
            ],
            techStack: ['Python', 'PyPDF2', 'pdfplumber', 'Pandas', 'Tesseract OCR'],
            ctaLink: 'contacto.html?service=ia-automatizacion&project=extraccion-pdf',
            ctaText: 'Quiero Automatizar Facturas',
            mediaImg: 'images/proyecto-6.jpg',
            aos: 'fade-up'
        },
        {
            id: 'proyecto-analisis-reddit',
            category: 'ia trading',
            date: 'Desarrollado en 2023',
            title: 'Automatización de Análisis de Sentimiento en Reddit',
            client: { name: 'Inversor Privado (Ejemplo)', avatar: '' },
            summary: 'Desarrollo de un sistema de análisis de sentimiento en foros financieros de Reddit con la API oficial y praw, para alimentar señales de trading basadas en sentimiento de usuarios.',
            challenge: 'Obtener una ventaja informativa en mercados volátiles mediante el análisis del "ruido social" y el sentimiento colectivo en tiempo real.',
            solution: [
                'Scraping de datos de subreddits específicos usando PRAW.',
                'Preprocesamiento de texto y limpieza de datos.',
                'Aplicación de modelos de análisis de sentimiento (VADER, TextBlob).',
                'Generación de un índice de sentimiento y alertas.'
            ],
            results: [
                { value: 'Tiempo Real', label: 'Análisis Sentimiento' },
                { value: 'Nuevas', label: 'Señales de Trading' }
            ],
            techStack: ['Python', 'praw', 'TextBlob', 'VADER', 'nltk', 'pandas'],
            ctaLink: 'contacto.html?service=trading-algoritmico&project=analisis-reddit',
            ctaText: 'Quiero Análisis de Sentimiento',
            mediaImg: 'images/proyecto-7.jpg',
            aos: 'fade-up'
        },
        {
            id: 'proyecto-web-landing',
            category: 'software web automatizacion',
            date: 'Entregado en 2024',
            title: 'Desarrollo Web y Automatización de Landing Pages',
            client: { name: 'Startup Tecnológica (Ejemplo)', avatar: '' },
            summary: 'Creación de páginas web modernas con sistemas de automatización integrados: CRM, formularios con respuesta automática, conexión a campañas de email marketing.',
            challenge: 'Mejorar la captación de leads y la eficiencia del funnel de ventas a través de landing pages optimizadas y procesos automatizados.',
            solution: [
                'Diseño UI/UX centrado en la conversión.',
                'Desarrollo responsive con HTML, CSS y JavaScript.',
                'Integración con Formspree o backend personalizado para formularios.',
                'Conexión con CRM (ej. HubSpot, Mailchimp) mediante APIs o Zapier/Make.'
            ],
            results: [
                { value: 'Mejorada', label: 'Tasa de Conversión' },
                { value: 'Automatizada', label: 'Gestión de Leads' }
            ],
            techStack: ['HTML', 'CSS', 'JavaScript', 'Tailwind', 'GitHub Pages', 'Make', 'Webflow', 'WordPress'],
            ctaLink: 'contacto.html?service=desarrollo-software&project=web-landing',
            ctaText: 'Necesito una Landing Page',
            mediaImg: 'images/proyecto-8.jpg',
            aos: 'fade-up'
        },
        {
            id: 'proyecto-contenido-inmobiliario',
            category: 'ia multimedia software',
            date: 'Realizado en 2023',
            title: 'Generación de Contenido Inmobiliario con IA',
            client: { name: 'Agencia Inmobiliaria Boutique', avatar: 'images/client-avatar-8.jpg' },
            summary: 'Generación automatizada de imágenes y vídeos hiperrealistas para home staging digital, presentaciones de propiedades y creación de contenidos para redes sociales.',
            challenge: 'Crear material visual atractivo y profesional para propiedades de forma rápida y coste-efectiva, sin necesidad de sesiones fotográficas o staging físico costoso.',
            solution: [
                'Uso de IA generativa para modificar y mejorar fotos existentes (home staging virtual).',
                'Creación de videos de presentación con avatares IA y clonación de voz.',
                'Diseño de posts para redes sociales con herramientas IA.',
                'Optimización de contenido para SEO y engagement.'
            ],
            results: [
                { value: 'Impactante', label: 'Presentación Visual' },
                { value: 'Reducidos', label: 'Costos de Marketing' }
            ],
            techStack: ['Runway Gen-2', 'D-ID', 'Pika', 'Leonardo.AI', 'Canva', 'Midjourney'],
            ctaLink: 'contacto.html?service=multimedia-ia&project=contenido-inmobiliario',
            ctaText: 'Quiero Contenido IA para Inmuebles',
            mediaImg: 'images/proyecto-9.jpg',
            aos: 'fade-up'
        },
        {
            id: 'proyecto-modelos-rentables',
            category: 'ia trading software',
            date: 'Desarrollo continuo',
            title: 'Creación de un Portfolio de Modelos Rentables',
            client: { name: 'DUSOLAI (Interno) / Inversores Asociados', avatar: '' },
            summary: 'Diseño estructurado de un sistema de validación de modelos de trading rentables usando técnicas como walk-forward validation, purged k-fold y análisis de sobreajuste.',
            challenge: 'Desarrollar y validar estrategias de trading algorítmico que sean consistentemente rentables y robustas ante diferentes condiciones de mercado.',
            solution: [
                'Framework de backtesting riguroso.',
                'Implementación de técnicas avanzadas de validación cruzada específicas para series temporales financieras.',
                'Análisis de métricas de rendimiento y riesgo (Sharpe, Sortino, Max Drawdown, etc.).',
                'Sistema modular para integrar y probar nuevos modelos y activos.'
            ],
            results: [
                { value: 'Validados', label: 'Modelos de Trading' },
                { value: 'Robusta', label: 'Gestión de Riesgo' }
            ],
            techStack: ['Python', 'scikit-learn', 'QuantConnect', 'Pyfolio', 'Backtrader', 'MLflow', 'Pandas'],
            ctaLink: 'contacto.html?service=trading-algoritmico&project=modelos-rentables',
            ctaText: 'Quiero Modelos de Trading Validados',
            mediaImg: 'images/proyecto-10.jpg',
            aos: 'fade-up'
        }
    ];

    let projectsToShow = 3;
    let currentlyRenderedCount = 5; // Asumiendo que los primeros 5 ya están en el HTML

    // Utilidades
    const utils = {
        debounce: function(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const context = this;
                const later = () => { timeout = null; func.apply(context, args); };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        },
        throttle: function(func, limit) {
            let inThrottle, lastFunc, lastRan;
            return function(...args) {
                const context = this;
                if (!inThrottle) {
                    func.apply(context, args); lastRan = Date.now(); inThrottle = true;
                    setTimeout(() => { inThrottle = false; if (lastFunc) { lastFunc.apply(context, args); lastFunc = null; lastRan = Date.now(); } }, limit);
                } else {
                    clearTimeout(lastFunc);
                    lastFunc = setTimeout(() => { if ((Date.now() - lastRan) >= limit) { func.apply(context, args); lastRan = Date.now(); } }, limit - (Date.now() - lastRan));
                }
            };
        },
        lazyLoadImages: function() { /* ... (código sin cambios) ... */
            const images = document.querySelectorAll('img[loading="lazy"]');
            if ('loading' in HTMLImageElement.prototype) {
                images.forEach(img => { if (img.dataset.src) { img.src = img.dataset.src; img.removeAttribute('data-src'); } });
            } else if (typeof IntersectionObserver !== 'undefined') {
                const imageObserver = new IntersectionObserver((entries, observer) => {
                    entries.forEach(entry => { if (entry.isIntersecting) { const img = entry.target; img.src = img.dataset.src || img.src; img.classList.add('loaded'); img.removeAttribute('data-src'); observer.unobserve(img); } });
                }, { rootMargin: "0px 0px 250px 0px" });
                images.forEach(img => imageObserver.observe(img));
            } else {
                images.forEach(img => { if (img.dataset.src) img.src = img.dataset.src; });
            }
        },
        initScrollAnimations: function() { /* ... (código sin cambios) ... */
            const animatedElements = document.querySelectorAll('[data-aos]');
            if (animatedElements.length === 0 || typeof IntersectionObserver === 'undefined') return;
            const animationObserver = new IntersectionObserver((entries, observer) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        const el = entry.target; const animation = el.dataset.aos; const delay = parseInt(el.dataset.aosDelay) || 0;
                        el.style.transitionDelay = `${delay}ms`; el.classList.add('aos-animate', animation); observer.unobserve(el);
                    }
                });
            }, { threshold: 0.15, rootMargin: `0px 0px -${config.animationOffset}px 0px` });
            animatedElements.forEach(el => animationObserver.observe(el));
        },
        smoothScrollTo: function(targetSelector, duration = 700, offset = config.headerHeight || 70) { /* ... (código sin cambios) ... */
            const targetElement = document.querySelector(targetSelector); if (!targetElement) { console.warn(`SmoothScroll: Elemento "${targetSelector}" no encontrado.`); return; }
            const targetPosition = targetElement.getBoundingClientRect().top + window.pageYOffset; const startPosition = window.pageYOffset; const distance = targetPosition - startPosition - offset; let startTime = null;
            function animation(currentTime) { if (startTime === null) startTime = currentTime; const timeElapsed = currentTime - startTime; const run = ease(timeElapsed, startPosition, distance, duration); window.scrollTo(0, run); if (timeElapsed < duration) { requestAnimationFrame(animation); } else { window.scrollTo(0, startPosition + distance); } }
            function ease(t, b, c, d) { t /= d / 2; if (t < 1) return c / 2 * t * t * t + b; t -= 2; return c / 2 * (t * t * t + 2) + b; }
            requestAnimationFrame(animation);
        }
    };

    // Tracking y Analytics
    const analytics = { /* ... (código sin cambios) ... */
        init: function() { window.dataLayer = window.dataLayer || []; this.trackEvents(); },
        trackEvent: function(category, action, label, value) { const eventPayload = { event_category: category, event_action: action, event_label: label, }; if (value !== undefined) { eventPayload.value = value; } window.dataLayer.push({ event: 'dusolai_custom_event', ...eventPayload }); if (typeof gtag === 'function' && config.gaTrackingId && config.gaTrackingId !== 'G-TU_GA_ID_REAL') { gtag('event', action, { 'category': category, 'label': label, 'value': value }); } },
        trackEvents: function() { document.body.addEventListener('click', utils.throttle(e => { const eventElement = e.target.closest('[data-event]'); if (eventElement) { const eventName = eventElement.dataset.event; const eventLabel = eventElement.getAttribute('aria-label') || eventElement.innerText.trim().substring(0, 70) || eventElement.href || 'N/A'; this.trackEvent('CTA Engagement', eventName, eventLabel); } }, 250)); let trackedScrollDepths = new Set(); const scrollPoints = [10, 25, 50, 75, 90]; window.addEventListener('scroll', utils.throttle(() => { if (!document.body) return; const scrollHeight = document.documentElement.scrollHeight - document.documentElement.clientHeight; if (scrollHeight <= 0) return; const currentScroll = (window.scrollY / scrollHeight) * 100; scrollPoints.forEach(point => { if (currentScroll >= point && !trackedScrollDepths.has(point)) { this.trackEvent('Page Engagement', 'Scroll Depth', `${point}% Reached`); trackedScrollDepths.add(point); } }); }, 500), { passive: true }); let timeOnPageSeconds = 0; const timeIntervalsToTrack = [30, 60, 120, 180, 300, 600]; let trackedTimeIntervals = new Set(); setInterval(() => { timeOnPageSeconds += 10; timeIntervalsToTrack.forEach(interval => { if (timeOnPageSeconds >= interval && !trackedTimeIntervals.has(interval)) { this.trackEvent('Page Engagement', 'Time on Page', `${Math.round(interval / 60)} min Reached`); trackedTimeIntervals.add(interval); } }); }, 10000); }
    };

    // Funcionalidades del Header
    const header = { /* ... (código sin cambios, asegurando que closeMobileMenu esté definido) ... */
        init: function() { const headerEl = document.querySelector('.header-optimized'); const menuToggleBtn = document.getElementById('mobile-menu'); const navMenuEl = document.querySelector('.nav-menu'); if (!headerEl) return; window.addEventListener('scroll', utils.throttle(() => { headerEl.classList.toggle('scrolled', window.scrollY > config.scrollThreshold); }, 100), { passive: true }); if (menuToggleBtn && navMenuEl) { menuToggleBtn.addEventListener('click', () => { if(state.isMenuOpen){ this.closeMobileMenu(menuToggleBtn, navMenuEl); } else { this.openMobileMenu(menuToggleBtn, navMenuEl); } }); navMenuEl.addEventListener('click', (e) => { if (e.target.matches('a') && state.isMenuOpen) { this.closeMobileMenu(menuToggleBtn, navMenuEl); } }); document.addEventListener('click', (e) => { if (state.isMenuOpen && !navMenuEl.contains(e.target) && !menuToggleBtn.contains(e.target)) { this.closeMobileMenu(menuToggleBtn, navMenuEl); } }); } },
        openMobileMenu: function(toggleBtn, menuEl) { state.prevFocusedElement = document.activeElement; state.isMenuOpen = true; toggleBtn.classList.add('is-active'); menuEl.classList.add('is-active'); toggleBtn.setAttribute('aria-expanded', 'true'); document.body.classList.add('no-scroll'); const firstFocusable = menuEl.querySelector('a, button, [tabindex]:not([tabindex="-1"])'); if(firstFocusable) firstFocusable.focus(); state.focusTrapHandler = e => { if(e.key === 'Tab'){ const focusable = menuEl.querySelectorAll('a, button, [tabindex]:not([tabindex="-1"])'); if(focusable.length===0) return; const first = focusable[0]; const last = focusable[focusable.length-1]; if(e.shiftKey){ if(document.activeElement === first){ e.preventDefault(); last.focus(); } } else { if(document.activeElement === last){ e.preventDefault(); first.focus(); } } } else if(e.key === 'Escape'){ header.closeMobileMenu(toggleBtn, menuEl); } }; menuEl.addEventListener('keydown', state.focusTrapHandler); },
        closeMobileMenu: function(toggleBtn, menuEl) { state.isMenuOpen = false; toggleBtn.classList.remove('is-active'); menuEl.classList.remove('is-active'); toggleBtn.setAttribute('aria-expanded', 'false'); document.body.classList.remove('no-scroll'); if(state.focusTrapHandler) menuEl.removeEventListener('keydown', state.focusTrapHandler); state.focusTrapHandler = null; if(state.prevFocusedElement) { state.prevFocusedElement.focus(); state.prevFocusedElement = null; } }
    };

    // Notification Bar
    const notificationBar = { /* ... (código sin cambios) ... */
        init: function() { const barEl = document.getElementById('notificationBar'); if (!barEl) return; const closeBtn = barEl.querySelector('.close-notification'); const dismissedKey = 'dusolaiNotificationDismissed_v1'; try { if (localStorage.getItem(dismissedKey) !== 'true') { setTimeout(() => barEl.style.display = 'block', 1800); } else { barEl.style.display = 'none'; } if (closeBtn) { closeBtn.addEventListener('click', () => { barEl.style.animation = 'slideUp 0.4s ease-out forwards'; setTimeout(() => barEl.style.display = 'none', 400); localStorage.setItem(dismissedKey, 'true'); analytics.trackEvent('UI Interaction', 'Notification Dismissed', 'Special Offer Bar'); }); } } catch (e) { console.warn('LocalStorage no disponible.'); barEl.style.display = 'none'; } }
    };

    // Floating CTA
    const floatingCTA = { /* ... (código sin cambios) ... */
        init: function() { const ctaEl = document.getElementById('floatingCTA'); if (!ctaEl) return; window.addEventListener('scroll', utils.throttle(() => { ctaEl.classList.toggle('visible', window.scrollY > (window.innerHeight * 0.75)); }, 150), { passive: true }); }
    };

    // Formularios Optimizados
    const forms = { /* ... (código sin cambios, _displayFormMessage usa modals.openModal('successModal')) ... */
        init: function() { document.querySelectorAll('form.contact-form-optimized, form.quick-contact-form').forEach(form => { this.setupForm(form); }); },
        setupForm: function(form) { const requiredFields = form.querySelectorAll('[required]'); requiredFields.forEach(field => { field.addEventListener('blur', (e) => this.validateField(e.target)); field.addEventListener('input', utils.debounce((e) => { if (e.target.classList.contains('error')) this.validateField(e.target); }, 450)); }); form.addEventListener('submit', async (e) => { e.preventDefault(); if (state.formSubmitting || !this.validateForm(form)) return; await this.submitForm(form); }); },
        validateField: function(field) { const value = field.value.trim(); let isValid = true; let errorMsg = ''; const parentGroup = field.closest('.form-group') || field.parentElement; let errorElement = parentGroup.querySelector('.error-message'); field.classList.remove('error'); if (errorElement) errorElement.remove(); if (field.hasAttribute('required') && !value) { isValid = false; errorMsg = field.dataset.errorMessageRequired || 'Este campo es obligatorio.'; } else if (field.type === 'email' && value && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value)) { isValid = false; errorMsg = field.dataset.errorMessageEmail || 'Por favor, introduce un email válido.'; } else if (field.type === 'tel' && value && !/^[\d\s\-\+\(\)\.\ Ext#*]+$/i.test(value)) { isValid = false; errorMsg = field.dataset.errorMessageTel || 'Formato de teléfono no válido.'; } if (!isValid) { field.classList.add('error'); errorElement = document.createElement('span'); errorElement.className = 'error-message'; errorElement.textContent = errorMsg; parentGroup.appendChild(errorElement); } return isValid; },
        validateForm: function(form) { let isFormValid = true; form.querySelectorAll('input, select, textarea').forEach(field => { if(field.hasAttribute('required') || field.value.trim() !== '') { if (!this.validateField(field)) isFormValid = false; } }); return isFormValid; },
        submitForm: async function(form) { state.formSubmitting = true; const submitBtn = form.querySelector('button[type="submit"]'); const originalBtnHTML = submitBtn.innerHTML; submitBtn.disabled = true; submitBtn.innerHTML = '<span class="spinner"></span> Enviando...'; const formData = new FormData(form); let data = {}; formData.forEach((value, key) => data[key] = value); try { const response = await fetch(form.action || config.formEndpoint, { method: 'POST', headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' }, body: JSON.stringify(data) }); if (response.ok) { modals.openModal('successModal'); form.reset(); analytics.trackEvent('Form Submission', 'Success', form.id || 'Formulario General'); if (typeof gtag === 'function' && config.googleAdsConversionId && config.googleAdsConversionId.includes('/')) { gtag('event', 'conversion', { 'send_to': config.googleAdsConversionId }); } } else { const errorData = await response.json().catch(() => ({})); const serverMessage = errorData.error || errorData.message || `Error del servidor (${response.status}). Intenta de nuevo.`; this._displayFormMessage(form, serverMessage, 'error'); analytics.trackEvent('Form Submission', 'Error', `${form.id || 'Formulario'}: Server ${response.status}`); } } catch (error) { console.error('Error en envío:', error); this._displayFormMessage(form, 'Hubo un problema. Revisa tu red.', 'error'); analytics.trackEvent('Form Submission', 'Error', `${form.id || 'Formulario'}: Network Error`); } finally { state.formSubmitting = false; submitBtn.disabled = false; submitBtn.innerHTML = originalBtnHTML; } },
        _displayFormMessage: function(form, messageText, type) { let feedbackEl = form.querySelector('.form-message-feedback'); if (!feedbackEl) { feedbackEl = document.createElement('div'); feedbackEl.className = 'form-message-feedback'; const submitButton = form.querySelector('button[type="submit"]'); form.insertBefore(feedbackEl, submitButton ? submitButton.nextSibling : null); } feedbackEl.textContent = messageText; feedbackEl.className = `form-message-feedback ${type}`; feedbackEl.style.display = 'block'; setTimeout(() => { feedbackEl.style.opacity = '0'; setTimeout(() => { feedbackEl.style.display = 'none'; feedbackEl.style.opacity = '1'; }, 500); }, 6500); }
    };

    // Hero Section
    const hero = { /* ... (código sin cambios) ... */
        init: function() { const video = document.getElementById('hero-video'); if (video && typeof IntersectionObserver !== 'undefined') { const videoObserver = new IntersectionObserver((entries) => { entries.forEach(entry => { if (entry.isIntersecting) { if (video.paused) video.play().catch(e => console.warn("Video play:", e)); } else { if (!video.paused) video.pause(); } }); }, { threshold: 0.2 }); videoObserver.observe(video); } }
    };

    // Smooth Scroll para enlaces de ancla
    const smoothScrollLinks = { /* ... (código sin cambios) ... */
        init: function() { document.body.addEventListener('click', function(e) { const anchor = e.target.closest('a[href^="#"]'); if (!anchor) return; const href = anchor.getAttribute('href'); if (href === '#' || href.startsWith('#!') || !document.querySelector(href)) return; e.preventDefault(); utils.smoothScrollTo(href, 700, config.headerHeight || 70); analytics.trackEvent('Navigation', 'Smooth Scroll Click', href); }); }
    };

    // Manejador de Modales (MODIFICADO para scroll interno)
    const modals = {
        init: function() {
            document.body.addEventListener('click', (e) => {
                const modalTarget = e.target.closest('.modal'); // El overlay del modal
                const closeButton = e.target.closest('.modal-close, .modal-close-dynamic');

                if (closeButton) {
                    this.closeModal(closeButton.closest('.modal, .project-modal'));
                } else if (modalTarget && e.target === modalTarget) { // Si se hace clic en el overlay (fondo)
                    this.closeModal(modalTarget);
                }
            });

            document.addEventListener('keydown', (e) => {
                if (e.key === "Escape" && state.activeModalId) {
                    const modalToClose = document.getElementById(state.activeModalId);
                    if(modalToClose) this.closeModal(modalToClose);
                }
            });
        },
        openModal: function(modalId) {
            const modal = document.getElementById(modalId);
            if (modal) {
                state.prevFocusedElement = document.activeElement;
                modal.style.display = 'flex';
                document.body.classList.add('no-scroll-modal-open'); // Evita scroll del body
                state.activeModalId = modalId;
                modal.setAttribute('aria-hidden', 'false');

                // Permitir scroll dentro del contenido del modal si es necesario
                const modalContent = modal.querySelector('.modal-content, .modal-content-dynamic');
                if (modalContent) {
                    modalContent.style.overflowY = 'auto';
                    modalContent.style.maxHeight = '90vh'; // o un valor que prefieras
                }

                const firstFocusable = modal.querySelector('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])');
                if (firstFocusable) firstFocusable.focus();
                state.focusTrapHandler = e => {
                    if(e.key === 'Tab'){
                        const focusable = modal.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])');
                        if(focusable.length===0) return;
                        const first = focusable[0];
                        const last = focusable[focusable.length-1];
                        if(e.shiftKey){
                            if(document.activeElement === first){ e.preventDefault(); last.focus(); }
                        } else {
                            if(document.activeElement === last){ e.preventDefault(); first.focus(); }
                        }
                    } else if(e.key === 'Escape'){
                        modals.closeModal(modal);
                    }
                };
                modal.addEventListener('keydown', state.focusTrapHandler);
                analytics.trackEvent('UI Interaction', 'Modal Opened', modalId);
            }
        },
        closeModal: function(modalElement) {
            if (modalElement) {
                modalElement.style.display = 'none';
                document.body.classList.remove('no-scroll-modal-open');
                modalElement.setAttribute('aria-hidden', 'true');

                const modalContent = modalElement.querySelector('.modal-content, .modal-content-dynamic');
                if (modalContent) {
                    modalContent.style.overflowY = ''; // Restablecer
                    modalContent.style.maxHeight = ''; // Restablecer
                }

                if(state.focusTrapHandler) modalElement.removeEventListener('keydown', state.focusTrapHandler);
                state.focusTrapHandler = null;
                if(state.prevFocusedElement) { state.prevFocusedElement.focus(); state.prevFocusedElement = null; }

                if (state.activeModalId === modalElement.id) state.activeModalId = null;
                analytics.trackEvent('UI Interaction', 'Modal Closed', modalElement.id);
            }
        }
    };

    // Funciones Específicas de Página
    const pageSpecific = {
        portfolio: {
            init: function() {
                if (!document.querySelector('.portfolio-grid-advanced')) return;
                this.initCounters();
                this.initFilters();
                this.initProjectModalTriggers();
                this.initLoadMoreButton(); // Llama a la nueva función
            },
            initCounters: function() { /* ... (código sin cambios) ... */
                const counters = document.querySelectorAll('.portfolio-stats [data-counter]'); if (counters.length === 0 || typeof IntersectionObserver === 'undefined') return; const animateCounter = (counter) => { const target = parseFloat(counter.dataset.counter); const duration = parseInt(counter.dataset.duration) || 1500; const delay = parseInt(counter.dataset.delay) || 0; const isFloat = target % 1 !== 0; setTimeout(() => { let current = 0; const frameDuration = 1000 / 60; const totalFrames = Math.round(duration / frameDuration); const increment = target / totalFrames; const update = () => { current += increment; if ((increment > 0 && current < target) || (increment < 0 && current > target)) { counter.textContent = isFloat ? current.toFixed(1) : Math.floor(current); requestAnimationFrame(update); } else { counter.textContent = isFloat ? target.toFixed(1) : target; } }; requestAnimationFrame(update); }, delay); }; const observer = new IntersectionObserver(entries => { entries.forEach(entry => { if (entry.isIntersecting) { animateCounter(entry.target); observer.unobserve(entry.target); } }); }, { threshold: 0.6 }); counters.forEach(c => observer.observe(c));
            },
            initFilters: function() { /* ... (código sin cambios) ... */
                const filterContainer = document.querySelector('.filter-buttons'); if (!filterContainer) return; filterContainer.addEventListener('click', utils.throttle(e => { if (!e.target.matches('.filter-btn')) return; const filterValue = e.target.dataset.filter; filterContainer.querySelector('.filter-btn.active')?.classList.remove('active'); e.target.classList.add('active'); const portfolioCards = Array.from(document.querySelectorAll('.portfolio-grid-advanced .portfolio-card-advanced[data-category]')); portfolioCards.forEach(card => { const categories = card.dataset.category.split(' '); const showCard = filterValue === 'all' || categories.includes(filterValue); card.style.transition = 'opacity 0.35s ease, transform 0.35s ease, max-height 0.35s ease, margin-bottom 0.35s ease, padding 0.35s ease'; if (showCard) { card.style.display = 'flex'; setTimeout(() => { card.style.opacity = '1'; card.style.transform = 'scale(1)'; card.style.maxHeight = '2000px'; card.style.marginBottom = '3.5rem'; card.style.padding = ''; }, 20); } else { card.style.opacity = '0'; card.style.transform = 'scale(0.95)'; card.style.maxHeight = '0'; card.style.marginBottom = '0'; card.style.padding = '0'; setTimeout(() => card.style.display = 'none', 350); } }); analytics.trackEvent('Portfolio Interaction', 'Filter Applied', filterValue); }, 250));
            },
            initProjectModalTriggers: function() {
                // Modificado para delegación de eventos, para que funcione con proyectos cargados dinámicamente
                const portfolioGrid = document.querySelector('.portfolio-grid-advanced');
                const projectModalElement = document.getElementById('projectModal');

                if (!portfolioGrid || !projectModalElement) return;

                portfolioGrid.addEventListener('click', (e) => {
                    const viewButton = e.target.closest('.view-details-btn[data-project]');
                    if (!viewButton) return;

                    const projectId = viewButton.dataset.project;
                    // Buscar la tarjeta directamente en el array de datos para consistencia
                    const projectData = allPortfolioProjects.find(p => p.id.replace('proyecto-', '') === projectId);

                    if (projectData) {
                        const modalBody = projectModalElement.querySelector('.modal-body-dynamic');
                        if (modalBody) {
                            // Reutilizamos la función de creación de HTML, pero solo para el contenido interno del modal.
                            // Esto asume que `createProjectCardHTML` puede ser adaptado o que tienes otra función
                            // para generar solo el contenido detallado del modal.
                            // Por simplicidad aquí, vamos a buscar el contenido en la tarjeta si ya está renderizada,
                            // o construirlo desde projectData si no.

                            let contentHTML = `<h2>${projectData.title || 'Detalles del Proyecto'}</h2>`;
                            
                            const existingCard = document.getElementById(projectData.id);
                            if (existingCard) { // Si la tarjeta está en el DOM, extraemos de ella
                                const summary = existingCard.querySelector('.project-summary p')?.outerHTML;
                                if(summary) contentHTML += summary;

                                const challengeBlock = Array.from(existingCard.querySelectorAll('.project-details-block')).find(block => block.querySelector('h4')?.innerText.includes('Desafío'));
                                if(challengeBlock) contentHTML += `<h4>El Desafío Principal:</h4>${challengeBlock.querySelector('p')?.outerHTML || ''}`;
                                
                                const solutionBlock = Array.from(existingCard.querySelectorAll('.project-details-block')).find(block => block.querySelector('h4')?.innerText.includes('Solución'));
                                if(solutionBlock) contentHTML += `<h4>Nuestra Solución Estratégica:</h4>${solutionBlock.querySelector('ul')?.outerHTML || ''}`;

                                const resultsGrid = existingCard.querySelector('.project-results-showcase .results-grid')?.outerHTML;
                                if(resultsGrid) contentHTML += `<h4>Resultados Cuantificables Obtenidos:</h4><div class="results-grid">${resultsGrid}</div>`;
                                
                                const techStackItems = Array.from(existingCard.querySelectorAll('.tech-stack .tech-item')).map(item => item.outerHTML).join('');
                                if(techStackItems) contentHTML += `<h4>Stack Tecnológico Implementado:</h4><div class="tech-stack">${techStackItems}</div>`;

                                const testimonialBlock = existingCard.querySelector('.project-testimonial-block')?.outerHTML;
                                if(testimonialBlock) contentHTML += testimonialBlock;

                            } else { // Si no está en el DOM (puede pasar si el modal se llama de otra forma), construir desde projectData
                                if(projectData.summary) contentHTML += `<p>${projectData.summary}</p>`;
                                if(projectData.challenge) contentHTML += `<h4>El Desafío Principal:</h4><p>${projectData.challenge}</p>`;
                                if(projectData.solution && projectData.solution.length > 0) {
                                    contentHTML += `<h4>Nuestra Solución Estratégica:</h4><ul>${projectData.solution.map(s => `<li>${s}</li>`).join('')}</ul>`;
                                }
                                if(projectData.results && projectData.results.length > 0) {
                                    contentHTML += `<h4>Resultados Cuantificables Obtenidos:</h4><div class="results-grid">${projectData.results.map(r => `<div class="result-metric"><span class="metric-value">${r.value}</span><span class="metric-label">${r.label}</span></div>`).join('')}</div>`;
                                }
                                if(projectData.techStack && projectData.techStack.length > 0) {
                                    contentHTML += `<h4>Stack Tecnológico Implementado:</h4><div class="tech-stack">${projectData.techStack.map(t => `<span class="tech-item">${t}</span>`).join('')}</div>`;
                                }
                                if(projectData.testimonial) {
                                    contentHTML += `<div class="project-testimonial-block"><blockquote>${projectData.testimonial.quote}</blockquote><cite>– ${projectData.testimonial.cite}</cite></div>`;
                                }
                            }
                            modalBody.innerHTML = contentHTML;
                            modals.openModal('projectModal');
                            analytics.trackEvent('Portfolio Interaction', 'View Project Details', projectId);
                        }
                    }
                });
            },
            initLoadMoreButton: function() {
                const loadMoreBtn = document.querySelector('.load-more-btn');
                const portfolioGrid = document.querySelector('.portfolio-grid-advanced');
                const projectsInfo = document.querySelector('.load-more-section .projects-info');

                if (!loadMoreBtn || !portfolioGrid) return;

                if (currentlyRenderedCount >= allPortfolioProjects.length) {
                    loadMoreBtn.style.display = 'none';
                    if (projectsInfo) projectsInfo.textContent = `Mostrando todos los ${allPortfolioProjects.length} proyectos.`;
                    return; 
                }
                 if (projectsInfo) projectsInfo.textContent = `Mostrando ${currentlyRenderedCount} de ${allPortfolioProjects.length} proyectos de nuestros 50+ casos de éxito.`;


                loadMoreBtn.addEventListener('click', () => {
                    const projectsToRender = allPortfolioProjects.slice(currentlyRenderedCount, currentlyRenderedCount + projectsToShow);

                    if (projectsToRender.length === 0) {
                        loadMoreBtn.style.display = 'none';
                        if (projectsInfo) projectsInfo.textContent = `Mostrando todos los ${allPortfolioProjects.length} proyectos.`;
                        return;
                    }

                    projectsToRender.forEach(projectData => {
                        if (!projectData.alreadyRendered) {
                            const projectCardHTML = this.createProjectCardHTML(projectData);
                            portfolioGrid.insertAdjacentHTML('beforeend', projectCardHTML);
                            // No incrementamos currentlyRenderedCount aquí, sino después del bucle.
                        }
                    });
                    currentlyRenderedCount += projectsToRender.filter(p => !p.alreadyRendered).length;


                    if (typeof AOS !== 'undefined') { AOS.refresh(); }

                    if (currentlyRenderedCount >= allPortfolioProjects.length) {
                        loadMoreBtn.style.display = 'none';
                        if (projectsInfo) projectsInfo.textContent = `Mostrando todos los ${allPortfolioProjects.length} proyectos.`;
                    } else {
                       if (projectsInfo) projectsInfo.textContent = `Mostrando ${currentlyRenderedCount} de ${allPortfolioProjects.length} proyectos de nuestros 50+ casos de éxito.`;
                    }
                });
            },
            createProjectCardHTML: function(project) {
                let resultsHTML = '';
                if (project.results && project.results.length > 0) {
                    project.results.forEach(result => {
                        resultsHTML += `<div class="result-metric"><span class="metric-value">${result.value}</span><span class="metric-label">${result.label}</span></div>`;
                    });
                }

                let techStackHTML = '';
                if (project.techStack && project.techStack.length > 0) {
                    project.techStack.forEach(tech => { techStackHTML += `<span class="tech-item">${tech}</span>`; });
                }

                let solutionHTML = '';
                if (project.solution && project.solution.length > 0) {
                    project.solution.forEach(item => { solutionHTML += `<li>${item}</li>`; });
                }
                
                let testimonialHTML = '';
                if (project.testimonial) {
                    testimonialHTML = `<div class="project-testimonial-block"><blockquote>${project.testimonial.quote}</blockquote><cite>– ${project.testimonial.cite}</cite></div>`;
                }

                return `
                    <article class="portfolio-card-advanced" data-category="${project.category}" id="${project.id}" data-aos="${project.aos || 'fade-up'}">
                        <div class="portfolio-media">
                            <img src="${project.mediaImg}" alt="Imagen del proyecto ${project.title}" width="600" height="400" loading="lazy">
                            <div class="media-overlay">
                                <button class="view-details-btn" data-project="${project.id.replace('proyecto-', '')}" aria-label="Ver detalles del proyecto ${project.title}">Ver Detalles</button>
                            </div>
                        </div>
                        <div class="portfolio-content-advanced">
                            <header class="project-header">
                                <span class="project-category-tag">${project.category.split(' ')[0].replace('-', ' ').replace(/\b\w/g, l => l.toUpperCase())}</span> 
                                <span class="project-date">${project.date}</span>
                            </header>
                            <h3 class="project-title">${project.title}</h3>
                            ${project.client ? `
                            <div class="project-client-info">
                                ${project.client.avatar ? `<img src="${project.client.avatar}" alt="Avatar de ${project.client.name}" width="40" height="40" loading="lazy">` : ''}
                                <span>Cliente: ${project.client.name}</span>
                            </div>` : ''}
                            <div class="project-summary">
                                <p>${project.summary}</p>
                            </div>
                            ${project.challenge ? `
                            <div class="project-details-block">
                                <h4>El Desafío Principal:</h4>
                                <p>${project.challenge}</p>
                            </div>` : ''}
                            ${solutionHTML ? `
                            <div class="project-details-block">
                                <h4>Nuestra Solución Estratégica:</h4>
                                <ul>${solutionHTML}</ul>
                            </div>` : ''}
                            ${resultsHTML ? `
                            <div class="project-results-showcase">
                                <h4>Resultados Cuantificables Obtenidos:</h4>
                                <div class="results-grid">${resultsHTML}</div>
                            </div>` : ''}
                            ${techStackHTML ? `
                            <div class="project-technologies-stack">
                                <h4>Stack Tecnológico Implementado:</h4>
                                <div class="tech-stack">${techStackHTML}</div>
                            </div>` : ''}
                            ${testimonialHTML}
                            <footer class="project-cta-footer">
                                <a href="${project.ctaLink}" class="cta-button cta-primary" data-event="project_${project.id.replace('proyecto-', '')}_cta_contact">
                                    ${project.ctaText}
                                </a>
                            </footer>
                        </div>
                    </article>
                `;
            }
        },
        contact: { /* ... (código sin cambios) ... */
            init: function() { if (!document.getElementById('mainContactForm')) return; this.initCountdown(); this.autoFillServiceFromURL(); },
            initCountdown: function() { const countdownTimer = document.querySelector('.countdown-timer'); if (!countdownTimer) return; const daysEl = countdownTimer.querySelector('#days'), hoursEl = countdownTimer.querySelector('#hours'), minutesEl = countdownTimer.querySelector('#minutes'), secondsEl = countdownTimer.querySelector('#seconds'); if (!daysEl || !hoursEl || !minutesEl || !secondsEl) return; let intervalId = setInterval(() => { const now = new Date(); let endOfferDate = new Date(now.getFullYear(), now.getMonth(), now.getDate() + 1, 0, 0, 0); if (now > endOfferDate) endOfferDate.setDate(endOfferDate.getDate() + 1); const diff = endOfferDate.getTime() - now.getTime(); if (diff <= 0) { [daysEl, hoursEl, minutesEl, secondsEl].forEach(el => el.textContent = '00'); return; } daysEl.textContent = String(Math.floor(diff / (1000*60*60*24))).padStart(2,'0'); hoursEl.textContent = String(Math.floor((diff / (1000*60*60)) % 24)).padStart(2,'0'); minutesEl.textContent = String(Math.floor((diff / 1000/60) % 60)).padStart(2,'0'); secondsEl.textContent = String(Math.floor((diff / 1000) % 60)).padStart(2,'0'); }, 1000); },
            autoFillServiceFromURL: function() { try { const urlParams = new URLSearchParams(window.location.search); const serviceParam = urlParams.get('service') || urlParams.get('subject'); if (serviceParam) { const form = document.getElementById('mainContactForm') || document.getElementById('quickContactForm') || document.getElementById('servicesContactForm'); if(form) {const serviceSelect = form.querySelector('select[name="service"], select[name="interest"]'); if (serviceSelect) { const option = serviceSelect.querySelector(`option[value="${serviceParam.toLowerCase()}"]`); if (option) option.selected = true; else console.warn(`Opción "${serviceParam}" no hallada.`); } } } } catch (e) { console.warn("Error URL params:", e); } }
        }
    };

    // Performance
    const performanceFeatures = { /* ... (código sin cambios) ... */
        init: function() { this.registerServiceWorker(); },
        registerServiceWorker: function() { if ('serviceWorker' in navigator && (window.location.protocol === 'https:' || window.location.hostname === 'localhost')) { window.addEventListener('load', () => { navigator.serviceWorker.register('/sw.js').then(reg => console.log('SW: Registrado:', reg.scope)).catch(err => console.warn('SW: Fallo:', err)); }); } }
    };

    // Inicialización del Sitio
    function initializeSite() {
        utils.lazyLoadImages();
        utils.initScrollAnimations();
        header.init();
        notificationBar.init();
        floatingCTA.init();
        forms.init();
        hero.init();
        smoothScrollLinks.init();
        analytics.init();
        modals.init();
        pageSpecific.portfolio.init();
        pageSpecific.contact.init();
        performanceFeatures.init();
        const yearEl = document.getElementById('currentYear');
        if (yearEl) yearEl.textContent = new Date().getFullYear().toString();
    }
    
    if (document.readyState === 'interactive' || document.readyState === 'complete') {
        initializeSite();
    } else {
        document.addEventListener('DOMContentLoaded', initializeSite, { once: true });
    }

    window.DUSOLAI_API = {
        trackEvent: analytics.trackEvent.bind(analytics),
        smoothScrollTo: utils.smoothScrollTo,
        openModal: modals.openModal.bind(modals),
        closeModal: modals.closeModal.bind(modals)
    };
})();